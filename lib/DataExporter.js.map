{"version":3,"file":"DataExporter.js","sourceRoot":"","sources":["../src/DataExporter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport { DbResult, Id64Array, Logger, LogLevel } from \"@bentley/bentleyjs-core\";\nimport { BackendRequestContext, ECSqlStatement, IModelDb } from \"@bentley/imodeljs-backend\";\nimport { MassPropertiesOperation, MassPropertiesRequestProps } from \"@bentley/imodeljs-common\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\n\nconst loggerCategory = \"DataExporter\";\n\nexport interface Options {\n  calculateMassProperties: boolean;\n  idColumn: number;\n  idColumnIsJsonArray: boolean;\n  dropIdColumnFromResult: boolean;\n}\n\ninterface MassProps {\n  totalCount: number;\n  volume: number;\n  volumeCount: number;\n  area: number;\n  areaCount: number;\n  length: number;\n  lengthCount: number;\n}\n\nconst defaultOptions: Options = {\n  calculateMassProperties: false,\n  idColumn: 0,\n  idColumnIsJsonArray: false,\n  dropIdColumnFromResult: false,\n};\n\nexport class DataExporter {\n  private _iModelDb: IModelDb;\n  private _outputDir: string;\n\n  public constructor(iModelDb: IModelDb) {\n    this._iModelDb = iModelDb;\n    this._outputDir = path.join(__dirname, \"..\", \"out\");\n\n    // initialize logging\n    Logger.initializeToConsole();\n    Logger.setLevelDefault(LogLevel.Error);\n    Logger.setLevel(loggerCategory, LogLevel.Trace);\n  }\n\n  public setFolder(folder: string): void {\n    this._outputDir = path.join(__dirname, \"..\", \"out\", folder);\n    if (fs.existsSync(this._outputDir)) {\n      try {\n        fs.rmdirSync(this._outputDir, { recursive: true });\n      } catch (error) {\n        console.error(error.message);\n      }\n    }\n\n    try {\n      fs.mkdirSync(this._outputDir, { recursive: true });\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  private rowToString(statement: ECSqlStatement, columnToSkip: number): string {\n    const valuesRow: string[] = [];\n    const replacer = (_key: string, value: any) => (value === null) ? undefined : value;\n\n    for (let i = 0; i < statement.getColumnCount(); i++) {\n      if (i === columnToSkip) {\n        continue;\n      }\n      const value = statement.getValue(i).value;\n      valuesRow.push(JSON.stringify(value, replacer));\n    }\n\n    const outRow = valuesRow.join(\";\");\n    return outRow;\n  }\n\n  private makeHeader(header: string[], statement: ECSqlStatement, columnToSkip?: number): string {\n    for (let i = 0; i < statement.getColumnCount(); i++) {\n      if (i === columnToSkip) {\n        continue;\n      }\n      header.push(statement.getValue(i).columnInfo.getAccessString());\n    }\n\n    const outHeader = header.join(\";\");\n    return outHeader;\n  }\n\n  private async calculateMassProps(ids: Id64Array): Promise<MassProps> {\n    const result: MassProps = { totalCount: ids.length, volume: 0, volumeCount: 0, area: 0, areaCount: 0, length: 0, lengthCount: 0 };\n\n    const requestContext = new BackendRequestContext();\n    let count = 0;\n    for (const id of ids) {\n      const requestProps: MassPropertiesRequestProps = {\n        operation: MassPropertiesOperation.AccumulateVolumes,\n        candidates: [id],\n      };\n      if (count > 0 && count % 1000 === 0) {\n        console.log(`Calculated ${count} mass properties: \\n${JSON.stringify(result)}`);\n      }\n      ++count;\n      const volumeProps = await this._iModelDb.getMassProperties(requestContext, requestProps);\n      const volume = volumeProps.volume ?? 0;\n      if (volume !== 0) {\n        result.volume += volume;\n        result.volumeCount += 1;\n      }\n      requestProps.operation = MassPropertiesOperation.AccumulateAreas;\n      const areaProps = await this._iModelDb.getMassProperties(requestContext, requestProps);\n      const area = areaProps.area ?? 0;\n      if (area !== 0) {\n        result.area += area;\n        result.areaCount += 1;\n      }\n      requestProps.operation = MassPropertiesOperation.AccumulateLengths;\n      const lengthProps = await this._iModelDb.getMassProperties(requestContext, requestProps);\n      const length = lengthProps.length ?? 0;\n      if (length !== 0) {\n        result.length += length;\n        result.lengthCount += 1;\n      }\n    }\n\n    return result;\n  }\n\n  private assignDefaultOptions(options: Partial<Options> = {}): Options {\n    return { ...defaultOptions, ...options };\n  }\n\n  public async writeQueryResultsToCsv(ecSql: string, fileName: string, options: Partial<Options> = {}): Promise<void> {\n    const outputFileName: string = path.join(this._outputDir, fileName);\n    const opts = this.assignDefaultOptions(options);\n\n    await this._iModelDb.withPreparedStatement(ecSql, async (statement: ECSqlStatement): Promise<void> => {\n      await this.writeQueries(statement, outputFileName, opts);\n    });\n  }\n\n  private async writeQueries(statement: ECSqlStatement, outputFileName: string, options: Options): Promise<void> {\n    const writeHeaders = !fs.existsSync(outputFileName);\n    const writeStream = fs.createWriteStream(outputFileName, { flags: \"a\" });\n    let ids: Id64Array = [];\n\n    if (writeHeaders) {\n      const header: string[] = (options.calculateMassProperties) ? [\"total_count\", \"volume\", \"volume_count\", \"area\", \"area_count\", \"length\", \"length_count\"] : [];\n      const outHeader = this.makeHeader(header, statement, options.dropIdColumnFromResult ? options.idColumn : -1);\n      writeStream.write(`${outHeader}\\n`);\n    }\n\n    let rowCount = 0;\n    while (DbResult.BE_SQLITE_ROW === statement.step()) {\n      const stringifiedRow = this.rowToString(statement, options.dropIdColumnFromResult ? options.idColumn : -1);\n      if (options.calculateMassProperties === true) {\n        if (options.idColumnIsJsonArray === true) {\n          ids = JSON.parse(statement.getValue(options.idColumn).getString()) as Id64Array;\n        } else {\n          ids = [statement.getValue(options.idColumn).getId()];\n        }\n        const result = await this.calculateMassProps(ids);\n        writeStream.write(`${result.totalCount};${result.volume};${result.volumeCount};${result.area};${result.areaCount};${result.length};${result.lengthCount};${stringifiedRow}\\n`);\n      } else {\n        writeStream.write(`${stringifiedRow}\\n`);\n      }\n      rowCount++;\n      if (rowCount % 1000 === 0) {\n        console.log(`${rowCount} rows processed so far`);\n      }\n    }\n\n    console.log(`Written ${rowCount} rows to file: ${outputFileName}`);\n    return new Promise((resolve, reject) => {\n      writeStream.on(\"finish\", resolve);\n      writeStream.on(\"error\", reject);\n      writeStream.end();\n    });\n  }\n}\n"]}