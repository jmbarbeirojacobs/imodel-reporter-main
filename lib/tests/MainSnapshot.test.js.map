{"version":3,"file":"MainSnapshot.test.js","sourceRoot":"","sources":["../../src/tests/MainSnapshot.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport { expect } from \"chai\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { Id64Array } from \"@bentley/bentleyjs-core\";\nimport { IModelHost, IModelJsFs, SnapshotDb } from \"@bentley/imodeljs-backend\";\n\nimport { DataExporter, Options } from \"../DataExporter\";\nimport { populateSourceDb, prepareSourceDb } from \"./iModelUtils\";\n\ndescribe(\"DataExporter.test.ts\", () => {\n  let sourceDbFile = \"\";\n  let sourceDb: SnapshotDb;\n  let userdata: any;\n\n  before(async () => {\n    await IModelHost.startup();\n    sourceDbFile = path.join(__dirname, \"TestiModel.bim\");\n    if (fs.existsSync(sourceDbFile))\n      fs.unlinkSync(sourceDbFile);\n\n    sourceDb = SnapshotDb.createEmpty(sourceDbFile, { rootSubject: { name: \"TestIModel\" } });\n    await prepareSourceDb(sourceDb);\n\n    populateSourceDb(sourceDb);\n    sourceDb.saveChanges();\n  });\n\n  after(async () => { await IModelHost.shutdown(); });\n\n  it(\"CSV files are correctly generated from imodel\", async () => {\n    const exporter = new DataExporter(sourceDb);\n    userdata = require(\"./assets/TestQueries.json\");\n    exporter.setFolder(userdata.folder);\n    const outFiles = [\"2dElements\", \"3dElements\", \"class\", \"schema\", \"volumeForGroupIds\", \"volumeForSingleIds\"].map((file) => `${file}.csv`);\n\n    for (const querykey of Object.keys(userdata.queries)) {\n      const aQuery = userdata.queries[querykey];\n      const fileName = `${aQuery.store !== undefined ? aQuery.store : querykey}.csv`;\n      await exporter.writeQueryResultsToCsv(aQuery.query, fileName, aQuery.options);\n    }\n    const outDir = path.join(__dirname, \"..\", \"..\", \"out\", userdata.folder);\n\n    expect(IModelJsFs.existsSync(outDir)).to.equal(true);\n    expect(IModelJsFs.readdirSync(outDir)).to.have.members(outFiles);\n  });\n\n  describe(\"Default options for query\", () => {\n    it(\"Should assign default values to query options, if options are not provided\", () => {\n      const exporter = new DataExporter(sourceDb);\n      const options = exporter[\"assignDefaultOptions\"]();\n      expect(options.calculateMassProperties).is.false;\n      expect(options.idColumn).is.equal(0);\n      expect(options.idColumnIsJsonArray).is.false;\n      expect(options.dropIdColumnFromResult).is.false;\n    });\n\n    it(\"Should not assign default values to already defined options\", () => {\n      const exporter = new DataExporter(sourceDb);\n      const options: Options = {\n        calculateMassProperties: true,\n        idColumn: 15,\n        idColumnIsJsonArray: true,\n        dropIdColumnFromResult: true,\n      };\n      const opts = exporter[\"assignDefaultOptions\"](options);\n      expect(opts.calculateMassProperties).is.true;\n      expect(opts.idColumn).to.equal(15);\n      expect(opts.idColumnIsJsonArray).is.true;\n      expect(opts.dropIdColumnFromResult).is.true;\n    });\n  });\n\n  describe(\"Volume calculation\", () => {\n    it(\"Should return zero instead of undefined if object doesn't have volume\", async () => {\n      const exporter = new DataExporter(sourceDb);\n      const ids: Id64Array = [\"0x2b\"]; // Id of existing 2D Geometry element from the test iModel.\n      const results = await exporter[\"calculateMassProps\"](ids);\n      expect(results.volume).is.equal(0);\n    });\n  });\n});\n"]}